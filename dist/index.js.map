{"version":3,"file":"index.js","sources":["../src/render-if-visible.tsx"],"sourcesContent":["import React, { useMemo, useState, useRef, useEffect } from 'react'\n\ntype Props = {\n  /**\n   * Whether the element should be visible initially or not.\n   * Useful e.g. for always setting the first N items to visible.\n   * Default: false\n   */\n  initialVisible?: boolean\n  /** An estimate of the element's height */\n  defaultHeight?: number\n  /** How far outside the viewport in pixels should elements be considered visible?  */\n  visibleOffset?: number\n  /** Should the element stay rendered after it becomes visible? */\n  stayRendered?: boolean\n  root?: HTMLElement | null\n  /** E.g. 'span', 'tbody'. Default = 'div' */\n  rootElement?: string\n  rootElementClass?: string\n  /** E.g. 'span', 'tr'. Default = 'div' */\n  placeholderElement?: string\n  placeholderElementClass?: string\n  children: React.ReactNode\n}\n\nconst RenderIfVisible = ({\n  initialVisible = false,\n  defaultHeight = 300,\n  visibleOffset = 1000,\n  stayRendered = false,\n  root = null,\n  rootElement = 'div',\n  rootElementClass = '',\n  placeholderElement = 'div',\n  placeholderElementClass = '',\n  children,\n}: Props) => {\n  const [isVisible, setIsVisible] = useState<boolean>(initialVisible)\n  const wasVisible = useRef<boolean>(initialVisible)\n  const placeholderHeight = useRef<number>(defaultHeight)\n  const intersectionRef = useRef<HTMLDivElement>(null)\n\n  // Set visibility with intersection observer\n  useEffect(() => {\n    if (intersectionRef.current) {\n      const localRef = intersectionRef.current\n      const observer = new IntersectionObserver(\n        (entries) => {\n          // Before switching off `isVisible`, set the height of the placeholder\n          if (!entries[0].isIntersecting) {\n            placeholderHeight.current = localRef!.offsetHeight\n          }\n          if (typeof window !== undefined && window.requestIdleCallback) {\n            window.requestIdleCallback(\n              () => setIsVisible(entries[0].isIntersecting),\n              {\n                timeout: 600,\n              }\n            )\n          } else {\n            setIsVisible(entries[0].isIntersecting)\n          }\n        },\n        { root, rootMargin: `${visibleOffset}px 0px ${visibleOffset}px 0px` }\n      )\n\n      observer.observe(localRef)\n      return () => {\n        if (localRef) {\n          observer.unobserve(localRef)\n        }\n      }\n    }\n    return () => {}\n  }, [])\n\n  useEffect(() => {\n    if (isVisible) {\n      wasVisible.current = true\n    }\n  }, [isVisible])\n\n  const placeholderStyle = { height: placeholderHeight.current }\n  const rootClasses = useMemo(\n    () => `renderIfVisible ${rootElementClass}`,\n    [rootElementClass]\n  )\n  const placeholderClasses = useMemo(\n    () => `renderIfVisible-placeholder ${placeholderElementClass}`,\n    [placeholderElementClass]\n  )\n\n  return React.createElement(rootElement, {\n    children: isVisible || (stayRendered && wasVisible.current) ? (\n      <>{children}</>\n    ) : (\n      React.createElement(placeholderElement, {\n        className: placeholderClasses,\n        style: placeholderStyle,\n      })\n    ),\n    ref: intersectionRef,\n    className: rootClasses,\n  })\n}\n\nexport default RenderIfVisible\n"],"names":["useState","useRef","useEffect","useMemo"],"mappings":"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"}